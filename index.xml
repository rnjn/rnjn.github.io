<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>üè°</title>
    <link>ranjansakalley.com/</link>
    <description>Recent content on üè°</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Jun 2019 23:22:59 +0530</lastBuildDate>
    
	<atom:link href="ranjansakalley.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>ranjansakalley.com/about/</link>
      <pubDate>Tue, 23 Jun 2020 23:50:02 +0530</pubDate>
      
      <guid>ranjansakalley.com/about/</guid>
      <description>Hullo there!
My name is Ranjan, I come from the wonderful city of Jabalpur, I moved to Bangalore in 2002 where I live now with my wife Gouri and 2 daughters - Gayatri and Mili, who are both equal parts guilty and innocent. I hope to see them grow up healthy and kind.
Currently, I work for an Indonesian company called gojek, building a much loved app that tries to remove life&amp;rsquo;s daily frictions.</description>
    </item>
    
    <item>
      <title>Scaling</title>
      <link>ranjansakalley.com/talks/scaling/</link>
      <pubDate>Mon, 24 Jun 2019 23:22:59 +0530</pubDate>
      
      <guid>ranjansakalley.com/talks/scaling/</guid>
      <description>June 2019
At an event organised by ThoughtWorks I presented on scaling - tech, teams and processes. The slides by themselves may not paint a complete picture, if you have any questions, do drop me an email, and I will try to get back to you.</description>
    </item>
    
    <item>
      <title>On Postels Law and Managing Change</title>
      <link>ranjansakalley.com/articles/on-postels-law-and-managing-change/</link>
      <pubDate>Thu, 30 Jul 2015 17:58:57 +0530</pubDate>
      
      <guid>ranjansakalley.com/articles/on-postels-law-and-managing-change/</guid>
      <description>Postel&amp;rsquo;s law ~19811,
 &amp;ldquo;Be conservative in what you do, be liberal in what you accept from others.&amp;rdquo; (RFC 793)
 A webservice accepting a message with a defined schema (xml/json/other) may choose to do one of these when it encounters messages with extra nodes/properties -
 be conservative and discard be liberal and accept  Of the two, there are more proponents for the latter than the former. There are many reasons thrown at the conservatives, one of them that has practical implications is change in schema.</description>
    </item>
    
    <item>
      <title>On Postels law and managing change</title>
      <link>ranjansakalley.com/test-page/</link>
      <pubDate>Thu, 30 Jul 2015 13:49:52 +0530</pubDate>
      
      <guid>ranjansakalley.com/test-page/</guid>
      <description>Postel&amp;rsquo;s law ~19811,
 &amp;ldquo;Be conservative in what you do, be liberal in what you accept from others.&amp;rdquo; (RFC 793)
 A webservice accepting a message with a defined schema (xml/json/other) may choose to do one of these when it encounters messages with extra nodes/properties -
 be conservative and discard be liberal and accept  Of the two, there are more proponents for the latter than the former. There are many reasons thrown at the conservatives, one of them that has practical implications is change in schema.</description>
    </item>
    
    <item>
      <title>Pretty Python List Comprehensions</title>
      <link>ranjansakalley.com/articles/pretty-python-list-comprehensions/</link>
      <pubDate>Mon, 12 May 2014 17:52:27 +0530</pubDate>
      
      <guid>ranjansakalley.com/articles/pretty-python-list-comprehensions/</guid>
      <description>May 12th, 2014
Python list comprehensions are by far the simplest and most readable loop expressions that I have worked with. Here‚Äôs an example where I have a list of lists of lists (corpus ‚Äì&amp;gt; documents ‚Äì&amp;gt; sentences) where I need to remove some items (called stop_words here) from the sentences.
corpus = [[[word for word in sentence if word not in self._stop_words] for sentence in document] for document in corpus] Notice the array brackets added after each for expression so the program retains the same structure.</description>
    </item>
    
    <item>
      <title>Introducing Automation to Large Team</title>
      <link>ranjansakalley.com/articles/introducing-automation-to-large-team/</link>
      <pubDate>Mon, 24 Oct 2011 17:43:31 +0530</pubDate>
      
      <guid>ranjansakalley.com/articles/introducing-automation-to-large-team/</guid>
      <description>Oct 24th, 2011
 A reader on my article at infoq asked an interesting question - introducing automation to a big project which has been worked on for some time. I plan to write more posts on this topic, have a lot of thoughts, but here‚Äôs my immediate answer -
 A very strong actionable technique that I have seen work well is that you create a small/minimal smoke test suite for you larger app.</description>
    </item>
    
    <item>
      <title>Why is test automation the backbone of Continuous Delivery?</title>
      <link>ranjansakalley.com/articles/who-test-automation-is-backbone-of-cd/</link>
      <pubDate>Thu, 25 Aug 2011 16:13:37 +0530</pubDate>
      
      <guid>ranjansakalley.com/articles/who-test-automation-is-backbone-of-cd/</guid>
      <description>Aug 25th, 2011
Software testing and verification needs a careful and diligent process of impersonating an end user, trying various usages and input scenarios, comparing and asserting expected behaviours. Directly, the words ‚Äúcareful and diligent‚Äù invoke the idea of letting a computer program do the job. Automating certain programmable aspects of your test suite thus can help software delivery massively. In most of the projects that I have worked on, there were aspects of testing which could be automated, and then there were some that couldn‚Äôt.</description>
    </item>
    
    <item>
      <title>Who Should Write Functional Tests?</title>
      <link>ranjansakalley.com/articles/who-should-write-functional-tests/</link>
      <pubDate>Mon, 03 Jan 2011 16:08:19 +0530</pubDate>
      
      <guid>ranjansakalley.com/articles/who-should-write-functional-tests/</guid>
      <description>Jan 3rd, 2011
Functional testing code is more often than not treated as a second class citizen. Delivery teams tend to ignore problems with test code over a period of time, and worry more about test results. This leads to poor code quality and bad test architecture, which in turn hurts the maintainability of a test suite. Its this negative feedback cycle that a team should be worried about. In my opinion, treating test code as responsibly as we treat functional code fixes this.</description>
    </item>
    
    <item>
      <title>Why Teams Lose Faith in their Functional Automation suite?</title>
      <link>ranjansakalley.com/articles/why-teams-lose-faith-in-functional-automation/</link>
      <pubDate>Mon, 06 Dec 2010 16:03:31 +0530</pubDate>
      
      <guid>ranjansakalley.com/articles/why-teams-lose-faith-in-functional-automation/</guid>
      <description>DEC 6th, 2010
In my opinion, there are three main reasons why a functional automation suite loses its value (or the respect that a delivery team should pay it). This leads to a variety of problems, but I will save that for a later post.
The reasons for me are -
  Non-deterministic tests - run the same test again (without changing the code) and the test gives different results.</description>
    </item>
    
    <item>
      <title>Is Your Functional Suite Done Right</title>
      <link>ranjansakalley.com/articles/is-your-functional-suite-done-right/</link>
      <pubDate>Tue, 10 Feb 2009 15:59:41 +0530</pubDate>
      
      <guid>ranjansakalley.com/articles/is-your-functional-suite-done-right/</guid>
      <description>Feb 10th, 2009
On the last two projects that I have worked on, both being fairly sized in terms of people (40+), I have seen enormous effort being spent on functional testing. The effort, though not completely wasted, hasn‚Äôt yielded proportional gains in terms of quality improvements and quicker feedback on a higher integration level. The following list tries to address issues and my take on fixing them.
Separation of Concerns Functional suites suffer most from a lack of clear directive on what they are written for.</description>
    </item>
    
  </channel>
</rss>