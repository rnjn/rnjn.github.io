<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>üè°</title>
    <link>https://rnjn.in/</link>
    <description>Recent content on üè°</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Apr 2023 12:14:42 +0530</lastBuildDate><atom:link href="https://rnjn.in/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Risks of Cross Functional Team Structure</title>
      <link>https://rnjn.in/articles/risks-of-cross-functional-team-structure/</link>
      <pubDate>Mon, 10 Apr 2023 12:14:42 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/risks-of-cross-functional-team-structure/</guid>
      <description>A PoD structure enables cross functional teams, that is, teams that comprise of different specialisations like engineer, product manager, data scientist etc to work independently and execute on a business goal without dependencies on other teams. This type of structure increases the execution speed but is not without risks. Some of these that I have encountered are mentioned below -
Division of work The key to executing fast is independence in decision-making for the area of work, and not having to wait on other teams to complete a team&amp;rsquo;s work.</description>
    </item>
    
    <item>
      <title>How do you (technically) find if you are overstaffed or understaffed? </title>
      <link>https://rnjn.in/articles/how-to-find-if-you-are-overstaffed-or-understaffed/</link>
      <pubDate>Mon, 21 Nov 2022 14:58:44 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/how-to-find-if-you-are-overstaffed-or-understaffed/</guid>
      <description>Staffing is relative to expectations. In the growth mood, you may want to build a lot of features and stretch, you may feel understaffed. If you are in the mood for conservation, you would want to maximise on efforts that make you money in the next 3-6 months period, so a lot of work being done may feel redundant and you feel you are overstaffed. Since this is a complex problem, we need to look at the levers.</description>
    </item>
    
    <item>
      <title>Product Engineering TODOs for Startup Leaders</title>
      <link>https://rnjn.in/articles/product-engineering-todos-for-series-a-leaders/</link>
      <pubDate>Sun, 09 Oct 2022 23:15:16 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/product-engineering-todos-for-series-a-leaders/</guid>
      <description>Oct 7th, 2022
Series A funds are generally used to grow business, often to scale as a startup finds a product market fit (PMF). Often times, startups slow down and fail 3-4 years after this stage because of decisions made during this stage, especially when it comes to product engineering. Here are some things I think founders and engineering leaders should care about, and set straight at this stage if they haven&amp;rsquo;t started already.</description>
    </item>
    
    <item>
      <title>The Ringelmann Effect</title>
      <link>https://rnjn.in/articles/the-ringelmann-effect/</link>
      <pubDate>Fri, 23 Sep 2022 09:09:50 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/the-ringelmann-effect/</guid>
      <description>Sep 23th, 2022
Lately I have been reading a bit about group dynamics, and I came across something very obvious yet not talked about in simple terms - the effect of group size on individual productivity. Back in 1913, a French agricultural engineer Max Ringelmann discovered what we now know as the Ringelmann Effect - the tendency for individual members of a group to become increasingly less productive as the size of their group increases.</description>
    </item>
    
    <item>
      <title>Learnings from implementing OKRs</title>
      <link>https://rnjn.in/articles/learnings-about-okrs/</link>
      <pubDate>Tue, 13 Oct 2020 13:55:25 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/learnings-about-okrs/</guid>
      <description>OKRs are theoretically quite good for planning and communicating organisational goals and checking progress. The ideas are very simple and draw on empirical wisdom from successful companies like intel and google, thus in absence of a pre-existing system and for new companies its very easy to start using the methodology. OKRs also resonate well with teams that have driven progress iteratively. However, there&amp;rsquo;s a distinct lack of literature around failures and learnings to get into a good rhythm of planning and execution using OKRs, the available literature does a good job of selling.</description>
    </item>
    
    <item>
      <title>Getting Back to Work Post Paternity Leave</title>
      <link>https://rnjn.in/articles/getting-back-to-work-post-paternity-leave/</link>
      <pubDate>Mon, 06 Jul 2020 00:13:28 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/getting-back-to-work-post-paternity-leave/</guid>
      <description>Jul 6th, 2020
A good friend became a father recently, and wanted to get some free advice about what to expect when he got back to work.
Hey,
If you&amp;rsquo;re reading this because you are getting back to work after your paternity leave, congratulations mate, well done! However, I do not envy you at all, practically speaking. Your life has changed dramatically in the last 2-3 months, you are barely keeping your eyes open, and hoping people around stop advising you on everything and also the opposite.</description>
    </item>
    
    <item>
      <title>Boehm&#39;s Law</title>
      <link>https://rnjn.in/glossary/boehms-law/</link>
      <pubDate>Thu, 02 Jul 2020 15:35:33 +0530</pubDate>
      
      <guid>https://rnjn.in/glossary/boehms-law/</guid>
      <description>Barry Boehm was a visionary and his research and conclusions laid the foundation of methods (for eg. XP) to build software efficiently. One of his many seminal works is the law that he proved (with data) - The cost of finding and fixing a defect grows exponentially with time Some of the many practices that engineers follow today address the effects of the law -
Pair programming Continous integration and continuous delivery Automated functional tests </description>
    </item>
    
    <item>
      <title>If It Hurts, Do It More Often</title>
      <link>https://rnjn.in/glossary/if-it-hurts-do-it-more-often/</link>
      <pubDate>Thu, 02 Jul 2020 08:36:09 +0530</pubDate>
      
      <guid>https://rnjn.in/glossary/if-it-hurts-do-it-more-often/</guid>
      <description>Oft noted tenet in the world of programming, this principal is the basis of continuous integration and many more things (I tried to dig a bit into the origins, but didn&amp;rsquo;t find much success).
Remember, &amp;ldquo;often&amp;rdquo; is used here as a relative measure of time, and could be replaced by a unit which makes sense -
test integrations on every change (Integrations are hard) standup for 10 minutes everyday instead of an hour at the end of week (Alignments are hard) run performance reviews monthly (Perf reviews are hard) run OKR cadences monthly (Distributed work is hard) break all your user stories to 1 pointers (Estimating big stories is hard) pair program (Code reviews are hard) build and test changes incrementally (Boehm&amp;rsquo;s law) As you can see, the value of following this tenet is high when complexity grows exponentially with time.</description>
    </item>
    
    <item>
      <title>Iterative Improvement</title>
      <link>https://rnjn.in/glossary/iterative-improvement/</link>
      <pubDate>Wed, 01 Jul 2020 09:39:00 +0530</pubDate>
      
      <guid>https://rnjn.in/glossary/iterative-improvement/</guid>
      <description>Iterative improvement is the basis of most modern project management principles (agile/xp/scrum..). It follows the Scientific Method. The steps are simple and intuitive, indeed they follow how we learn most things - by trying and failing and trying again. So in case you have a system that you want to improve - Experiment - formalise and execute the change you expect to make in the system Observe - Observe the effect(s) of said change Course Correct - From these observations, find out if changes in the experiments are needed, and then make them.</description>
    </item>
    
    <item>
      <title>Goal based performance and progress tracking</title>
      <link>https://rnjn.in/articles/set-specific-goals-and-iterate/</link>
      <pubDate>Sat, 27 Jun 2020 17:53:36 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/set-specific-goals-and-iterate/</guid>
      <description>Jul 5th, 2020
In general, employee performance cycles are considered a painful experience for most participants. There are many reasons for this -
No expectation setting Generic and high level expectation setting Role definitions and Job descriptions do not encompass everything that an employee does Frequent shifting in expectations Long performance review cycles Lack of accountability of evaluators Lack of documented progress through the cycle Quality of reviewers is not monitored Batching of reviews causes crammed up schedules and reduces individual attention All these (and more) add up to employees getting surprised during reviews, and builds frustration overall even in organisations that take pride in how they treat their employees.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://rnjn.in/about/</link>
      <pubDate>Tue, 23 Jun 2020 23:50:02 +0530</pubDate>
      
      <guid>https://rnjn.in/about/</guid>
      <description>Hullo there!
My name is Ranjan, you may find my work bio here. I am currently on a break from active employment and spending time with kids, reading, roaming around and generally not doing much of anything. During this break, I am helping and coaching some founders and engineering leaders who have found pmf and are aspiring to scale their engineering teams.
More about me Till recently, I managed engineering for an Indian edTech company called Vedantu.</description>
    </item>
    
    <item>
      <title>Books that help understanding and building productive teams</title>
      <link>https://rnjn.in/articles/books-that-help-in-team-building/</link>
      <pubDate>Mon, 27 Apr 2020 13:34:14 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/books-that-help-in-team-building/</guid>
      <description>Apr 27th, 2020
A very dear friend asked me the other day - what is the best book you‚Äôve read about building teams? I thought it best to take time to answer this. I am not an expert at either, reading books or building teams.
In the last 4-5 years, I have worked and managed teams that have been very productive and have been together even now. None of this is because of a book, or because of me.</description>
    </item>
    
    <item>
      <title>Scaling</title>
      <link>https://rnjn.in/talks/scaling/</link>
      <pubDate>Mon, 24 Jun 2019 23:22:59 +0530</pubDate>
      
      <guid>https://rnjn.in/talks/scaling/</guid>
      <description>June 2019
At an event organised by ThoughtWorks I presented on scaling - tech, teams and processes. The slides by themselves may not paint a complete picture, if you have any questions, do drop me an email, and I will try to get back to you.</description>
    </item>
    
    <item>
      <title>On Postels Law and Managing Change</title>
      <link>https://rnjn.in/articles/on-postels-law-and-managing-change/</link>
      <pubDate>Thu, 30 Jul 2015 17:58:57 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/on-postels-law-and-managing-change/</guid>
      <description>Postel&amp;rsquo;s law ~19811,
&amp;ldquo;Be conservative in what you do, be liberal in what you accept from others.&amp;rdquo; (RFC 793)
A webservice accepting a message with a defined schema (xml/json/other) may choose to do one of these when it encounters messages with extra nodes/properties -
be conservative and discard be liberal and accept Of the two, there are more proponents for the latter than the former. There are many reasons thrown at the conservatives, one of them that has practical implications is change in schema.</description>
    </item>
    
    <item>
      <title>On Postels law and managing change</title>
      <link>https://rnjn.in/test-page/</link>
      <pubDate>Thu, 30 Jul 2015 13:49:52 +0530</pubDate>
      
      <guid>https://rnjn.in/test-page/</guid>
      <description>Postel&amp;rsquo;s law ~19811,
&amp;ldquo;Be conservative in what you do, be liberal in what you accept from others.&amp;rdquo; (RFC 793)
A webservice accepting a message with a defined schema (xml/json/other) may choose to do one of these when it encounters messages with extra nodes/properties -
be conservative and discard be liberal and accept Of the two, there are more proponents for the latter than the former. There are many reasons thrown at the conservatives, one of them that has practical implications is change in schema.</description>
    </item>
    
    <item>
      <title>Pretty Python List Comprehensions</title>
      <link>https://rnjn.in/articles/pretty-python-list-comprehensions/</link>
      <pubDate>Mon, 12 May 2014 17:52:27 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/pretty-python-list-comprehensions/</guid>
      <description>May 12th, 2014
Python list comprehensions are by far the simplest and most readable loop expressions that I have worked with. Here‚Äôs an example where I have a list of lists of lists (corpus ‚Äì&amp;gt; documents ‚Äì&amp;gt; sentences) where I need to remove some items (called stop_words here) from the sentences.
corpus = [[[word for word in sentence if word not in self._stop_words] for sentence in document] for document in corpus] Notice the array brackets added after each for expression so the program retains the same structure.</description>
    </item>
    
    <item>
      <title>Introducing Automation to Large Team</title>
      <link>https://rnjn.in/articles/introducing-automation-to-large-team/</link>
      <pubDate>Mon, 24 Oct 2011 17:43:31 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/introducing-automation-to-large-team/</guid>
      <description>Oct 24th, 2011
A reader on my article at infoq asked an interesting question - introducing automation to a big project which has been worked on for some time. I plan to write more posts on this topic, have a lot of thoughts, but here‚Äôs my immediate answer -
A very strong actionable technique that I have seen work well is that you create a small/minimal smoke test suite for you larger app.</description>
    </item>
    
    <item>
      <title>Why is test automation the backbone of Continuous Delivery?</title>
      <link>https://rnjn.in/articles/why-test-automation-is-backbone-of-cd/</link>
      <pubDate>Thu, 25 Aug 2011 16:13:37 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/why-test-automation-is-backbone-of-cd/</guid>
      <description>Aug 25th, 2011
Software testing and verification needs a careful and diligent process of impersonating an end user, trying various usages and input scenarios, comparing and asserting expected behaviours. Directly, the words ‚Äúcareful and diligent‚Äù invoke the idea of letting a computer program do the job. Automating certain programmable aspects of your test suite thus can help software delivery massively. In most of the projects that I have worked on, there were aspects of testing which could be automated, and then there were some that couldn‚Äôt.</description>
    </item>
    
    <item>
      <title>Who Should Write Functional Tests?</title>
      <link>https://rnjn.in/articles/who-should-write-functional-tests/</link>
      <pubDate>Mon, 03 Jan 2011 16:08:19 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/who-should-write-functional-tests/</guid>
      <description>Jan 3rd, 2011
Functional testing code is more often than not treated as a second class citizen. Delivery teams tend to ignore problems with test code over a period of time, and worry more about test results. This leads to poor code quality and bad test architecture, which in turn hurts the maintainability of a test suite. Its this negative feedback cycle that a team should be worried about. In my opinion, treating test code as responsibly as we treat functional code fixes this.</description>
    </item>
    
    <item>
      <title>Why Teams Lose Faith in their Functional Automation suite?</title>
      <link>https://rnjn.in/articles/why-teams-lose-faith-in-functional-automation/</link>
      <pubDate>Mon, 06 Dec 2010 16:03:31 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/why-teams-lose-faith-in-functional-automation/</guid>
      <description>DEC 6th, 2010
In my opinion, there are three main reasons why a functional automation suite loses its value (or the respect that a delivery team should pay it). This leads to a variety of problems, but I will save that for a later post.
The reasons for me are -
Non-deterministic tests - run the same test again (without changing the code) and the test gives different results.
This, in my opinion is the least attractive aspect, a true demotivator for a delivery team to believe in its functional test suite.</description>
    </item>
    
    <item>
      <title>Is Your Functional Suite Done Right?</title>
      <link>https://rnjn.in/articles/is-your-functional-suite-done-right/</link>
      <pubDate>Tue, 10 Feb 2009 15:59:41 +0530</pubDate>
      
      <guid>https://rnjn.in/articles/is-your-functional-suite-done-right/</guid>
      <description>Feb 10th, 2009
On the last two projects that I have worked on, both being fairly sized in terms of people (40+), I have seen enormous effort being spent on functional testing. The effort, though not completely wasted, hasn‚Äôt yielded proportional gains in terms of quality improvements and quicker feedback on a higher integration level. The following list tries to address issues and my take on fixing them.
Separation of Concerns Functional suites suffer most from a lack of clear directive on what they are written for.</description>
    </item>
    
  </channel>
</rss>
