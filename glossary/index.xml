<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Glossaries on üè°</title>
    <link>https://rnjn.in/glossary/</link>
    <description>Recent content in Glossaries on üè°</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Jul 2020 15:35:33 +0530</lastBuildDate>
    <atom:link href="https://rnjn.in/glossary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Boehm&#39;s Law</title>
      <link>https://rnjn.in/glossary/boehms-law/</link>
      <pubDate>Thu, 02 Jul 2020 15:35:33 +0530</pubDate>
      <guid>https://rnjn.in/glossary/boehms-law/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Barry_Boehm&#34;&gt;Barry Boehm&lt;/a&gt; was a visionary and his research and conclusions laid the foundation of methods (for eg. XP) to build software efficiently. One of his many seminal works is the law that he proved (with data) -&#xA;&lt;strong&gt;The cost of finding and fixing a defect grows exponentially with time&lt;/strong&gt;&#xA;&lt;img src=&#34;../boehms-law.png&#34; alt=&#34;Boehm&amp;rsquo;s Law&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Some of the many practices that engineers follow today address the effects of the law -&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pair programming&lt;/li&gt;&#xA;&lt;li&gt;Continous integration and continuous delivery&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://rnjn.in/articles/why-test-automation-is-backbone-of-cd/&#34;&gt;Automated functional tests&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>If It Hurts, Do It More Often</title>
      <link>https://rnjn.in/glossary/if-it-hurts-do-it-more-often/</link>
      <pubDate>Thu, 02 Jul 2020 08:36:09 +0530</pubDate>
      <guid>https://rnjn.in/glossary/if-it-hurts-do-it-more-often/</guid>
      <description>&lt;p&gt;Oft noted tenet in the world of programming, this principal is the basis of continuous integration and many more things (I tried to dig a bit into the origins, but didn&amp;rsquo;t find much success).&lt;/p&gt;&#xA;&lt;p&gt;Remember, &amp;ldquo;often&amp;rdquo; is used here as a relative measure of time, and could be replaced by a unit which makes sense -&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;test integrations on every change (&lt;em&gt;Integrations are hard&lt;/em&gt;)&lt;/li&gt;&#xA;&lt;li&gt;standup for 10 minutes everyday instead of an hour at the end of week (&lt;em&gt;Alignments are hard&lt;/em&gt;)&lt;/li&gt;&#xA;&lt;li&gt;run performance reviews monthly (&lt;em&gt;Perf reviews are hard&lt;/em&gt;)&lt;/li&gt;&#xA;&lt;li&gt;run OKR cadences monthly (&lt;em&gt;Distributed work is hard&lt;/em&gt;)&lt;/li&gt;&#xA;&lt;li&gt;break all your user stories to 1 pointers (&lt;em&gt;Estimating big stories is hard&lt;/em&gt;)&lt;/li&gt;&#xA;&lt;li&gt;pair program (&lt;em&gt;Code reviews are hard&lt;/em&gt;)&lt;/li&gt;&#xA;&lt;li&gt;build and test changes incrementally (&lt;a href=&#34;../boehms-law&#34;&gt;&lt;em&gt;Boehm&amp;rsquo;s law&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;As you can see, the value of following this tenet is high when complexity grows exponentially with time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Iterative Improvement</title>
      <link>https://rnjn.in/glossary/iterative-improvement/</link>
      <pubDate>Wed, 01 Jul 2020 09:39:00 +0530</pubDate>
      <guid>https://rnjn.in/glossary/iterative-improvement/</guid>
      <description>&lt;p&gt;Iterative improvement is the basis of most modern project management principles (agile/xp/scrum..). It follows the &lt;a href=&#34;https://en.wikipedia.org/wiki/Scientific_method#Process&#34;&gt;Scientific Method&lt;/a&gt;. The steps are simple and intuitive, indeed they follow how we learn most things - by trying and failing and trying again. So in case you have a system that you want to improve -&#xA;&lt;img src=&#34;../iterative-improvement.png&#34; alt=&#34;Iterative Improvement&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Experiment&lt;/strong&gt; - formalise and execute the change you expect to make in the system&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Observe&lt;/strong&gt; - Observe the effect(s) of said change&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Course Correct&lt;/strong&gt; - From these observations, find out if changes in the experiments are needed, and then make them.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;and repeat, till you are satisfied with the desired improvement. This is it, this is the basis of a virtuous improvement cycle. To improve any system - software or process or cooking, just follow the 3 step plan.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
